generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum ConfigType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

model User {
  id                      String                   @id @default(uuid())
  name                    String
  email                   String                   @unique
  password                String
  isVerified              Boolean                  @default(false)
  isActive                Boolean                  @default(true)
  role                    Role                     @default(USER)
  avatar                  String?
  phone                   String?
  birthDate               DateTime?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  lastLoginAt             DateTime?
  balance                 Decimal                  @default(1000) @db.Decimal(18, 8)
  referralCode            String?                  @unique

  // Relação de afiliados
  referredById           String?
  referredBy             User?     @relation("referrals", fields: [referredById], references: [id])
  referrals              User[]    @relation("referrals")

  verificationToken       String?
  tokenExpiry             DateTime?
  emailVerifiedAt         DateTime?
  passwordResetTokens     EmailVerificationToken[] @relation("UserEmailVerificationTokens")
  emailVerificationTokens PasswordResetToken[]     @relation("UserPasswordResetTokens")
  sessions                UserSession[]
  orders                  Order[]

  @@map("users")
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isActive  Boolean  @default(true)
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model SystemConfig {
  id        String     @id @default(uuid())
  key       String     @unique
  value     String
  type      ConfigType @default(STRING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("system_configs")
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation("UserEmailVerificationTokens", fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation("UserPasswordResetTokens", fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model Order {
  id          String   @id @default(uuid())
  userId      String
  amount      Decimal  @db.Decimal(18, 8)
  status      String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}
