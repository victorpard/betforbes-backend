generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(uuid())
  name                    String
  email                   String                   @unique
  password                String
  isVerified              Boolean                  @default(false)
  isActive                Boolean                  @default(true)
  role                    Role                     @default(USER)
  avatar                  String?
  phone                   String?
  birthDate               DateTime?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  lastLoginAt             DateTime?
  balance                 Decimal                  @default(1000) @db.Decimal(18, 8)  // saldo inicial fictício de 1 000
  referralCode            String?                  @unique
  referredBy              String?
  passwordResetTokens     EmailVerificationToken[] @relation("UserEmailVerificationTokens")
  emailVerificationTokens PasswordResetToken[]     @relation("UserPasswordResetTokens")
  sessions                UserSession[]
  orders                  Order[]                  // ← Relação inversa para Order

  @@map("users")
}

model Order {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset       String   // ex: "BTC-USDT"
  type        String   // "market" ou "limit"
  amount      Decimal  @db.Decimal(18, 8) // valor apostado
  leverage    Int      // alavancagem: 1,2,5,...50
  direction   String   // "LONG" ou "SHORT"
  entryPrice  Decimal  @default(0) @db.Decimal(18, 8)
  exitPrice   Decimal? @db.Decimal(18, 8)
  status      String   @default("OPEN")    // OPEN ou CLOSED
  profitLoss  Decimal? @db.Decimal(18, 8)
  createdAt   DateTime @default(now())
  closedAt    DateTime?

  @@map("orders")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation("UserPasswordResetTokens", fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation("UserEmailVerificationTokens", fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isActive  Boolean  @default(true)
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model SystemConfig {
  id        String     @id @default(uuid())
  key       String     @unique
  value     String
  type      ConfigType @default(STRING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("system_config")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  resource  String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum ConfigType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}
