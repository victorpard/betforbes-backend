// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum ConfigType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  password    String
  isVerified  Boolean   @default(false)
  isActive    Boolean   @default(true)
  role        Role      @default(USER)
  avatar      String?
  phone       String?
  birthDate   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?
  balance     Decimal   @default(1000) @db.Decimal(18, 8)

  referralCode String? @unique
  referredBy   String?
  referrer     User?   @relation("AffiliateRelation", fields: [referredBy], references: [id])
  referrals    User[]  @relation("AffiliateRelation")

  verificationToken String?
  tokenExpiry       DateTime?
  emailVerifiedAt   DateTime?

  passwordResetTokens     EmailVerificationToken[] @relation("UserEmailVerificationTokens")
  emailVerificationTokens PasswordResetToken[]     @relation("UserPasswordResetTokens")
  sessions                UserSession[]
  orders                  Order[]

  // Adicionando campos de relação ausentes
  affiliate           Affiliate?           @relation("UserAffiliate")
  referralConversions ReferralConversion[] @relation("UserReferralConversions")

  @@map("users")
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isActive  Boolean  @default(true)
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model SystemConfig {
  id        String     @id @default(uuid())
  key       String     @unique
  value     String
  type      ConfigType @default(STRING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("system_configs")
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation("UserEmailVerificationTokens", fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation("UserPasswordResetTokens", fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model Order {
  id          String   @id @default(uuid())
  userId      String
  amount      Decimal  @db.Decimal(18, 8)
  status      String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Affiliate {
  id             String   @id @default(uuid())
  user           User     @relation("UserAffiliate", fields: [userId], references: [id])
  userId         String   @unique
  code           String   @unique
  totalReferrals Int      @default(0)
  totalEarnings  Float    @default(0.0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  referrals ReferralConversion[] @relation("AffiliateConversions")

  @@map("affiliates")
}

model ReferralConversion {
  id           String    @id @default(uuid())
  affiliate    Affiliate @relation("AffiliateConversions", fields: [affiliateId], references: [id])
  affiliateId  String
  referredUser User      @relation("UserReferralConversions", fields: [userId], references: [id])
  userId       String
  email        String
  value        Float
  createdAt    DateTime  @default(now())

  @@map("referral_conversions")
}
