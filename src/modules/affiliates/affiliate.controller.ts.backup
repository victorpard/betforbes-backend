import { Request, Response } from 'express';
import { asyncHandler } from '../../middlewares/errorHandler';
import affiliateService from './affiliate.service';
import { logger } from '../../utils/logger';
import { getClientIP } from '../../utils/helpers';

interface AuthenticatedRequest extends Request {
  user?: {
    id: string;
    email: string;
    role: string;
  };
}

class AffiliateController {
  /**
   * Obter link de referÃªncia do usuÃ¡rio
   */
  getReferralLink = asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const userId = req.user?.id;

    if (!userId) {
      return res.status(401).json({
        success: false,
        message: 'UsuÃ¡rio nÃ£o autenticado',
        code: 'UNAUTHORIZED'
      });
    }

    const result = await affiliateService.getReferralLink(userId);

    logger.info(`ğŸ”— Link de referÃªncia obtido: ${req.user?.email} - IP: ${getClientIP(req)}`);

    return res.json({
      success: true,
      message: 'Link de referÃªncia obtido com sucesso',
      data: result
    });
  });

  /**
   * Obter estatÃ­sticas de afiliados
   */
  getAffiliateStats = asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const userId = req.user?.id;

    if (!userId) {
      return res.status(401).json({
        success: false,
        message: 'UsuÃ¡rio nÃ£o autenticado',
        code: 'UNAUTHORIZED'
      });
    }

    const stats = await affiliateService.getAffiliateStats(userId);

    logger.info(`ğŸ“Š EstatÃ­sticas de afiliados obtidas: ${req.user?.email} - IP: ${getClientIP(req)}`);

    return res.json({
      success: true,
      message: 'EstatÃ­sticas obtidas com sucesso',
      data: stats
    });
  });

  /**
   * Listar usuÃ¡rios referenciados
   */
  getReferrals = asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const userId = req.user?.id;
    const page = parseInt(req.query.page as string) || 1;
    const limit = parseInt(req.query.limit as string) || 10;

    if (!userId) {
      return res.status(401).json({
        success: false,
        message: 'UsuÃ¡rio nÃ£o autenticado',
        code: 'UNAUTHORIZED'
      });
    }

    const result = await affiliateService.getReferrals(userId, page, limit);

    logger.info(`ğŸ‘¥ Lista de referrals obtida: ${req.user?.email} - PÃ¡gina ${page} - IP: ${getClientIP(req)}`);

    return res.json({
      success: true,
      message: 'Lista de referrals obtida com sucesso',
      data: result
    });
  });
}

export default new AffiliateController();



