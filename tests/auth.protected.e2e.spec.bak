import request from 'supertest';
import app from '../src/app';
import prisma from '../src/prisma';

describe('Fluxo de Endpoints Protegidos, Refresh e Logout', () => {
  const email = `protected.${Date.now()}@example.com`;
  const password = 'SenhaForte123!';
  let accessToken: string;
  let refreshToken: string;

  beforeAll(async () => {
    // limpa registros antigos
    await prisma.user.deleteMany({ where: { email } });
    await prisma.emailVerificationToken.deleteMany({});
    await prisma.passwordResetToken.deleteMany({});
  });

  it('1) Deve negar acesso a /profile sem token', async () => {
    const res = await request(app).get('/api/auth/profile');
    expect([400, 401]).toContain(res.status);
    expect(['UNAUTHORIZED','INVALID_REFRESH_TOKEN']).toContain(res.body.code);
  });

  it('2) Cadastro e verificação de email', async () => {
    // 2.1) registra
    await request(app)
      .post('/api/auth/register')
      .send({ name: 'Teste Protegido', email, password })
      .then(r => { if (r.status !== 201) console.log('REGISTER FAIL BODY:', r.body); expect(r.status).toBe(201); });

    // pega token direto do banco
    const tokenRec = await prisma.emailVerificationToken.findFirst({
      where: { user: { email } },
      orderBy: { createdAt: 'desc' }
    });
    expect(tokenRec).not.toBeNull();

    // verifica email
    await request(app)
      .get(`/api/auth/verify-email?token=${tokenRec!.token}`)
      .expect(200);
  });

  it('3) /profile com token válido retorna dados do usuário', async () => {
    // faz login para obter tokens
    const login = await request(app)
      .post('/api/auth/login')
      .send({ email, password })
      .expect(200);
    accessToken = (login.body.data?.accessToken ?? login.body.data?.tokens?.accessToken);
    refreshToken = (login.body.data?.refreshToken ?? login.body.data?.tokens?.refreshToken);

    // consulta profile
    const res = await request(app)
      .get('/api/auth/profile')
      .set('Authorization', `Bearer ${accessToken}`);
    expect(res.status).toBe(200);
    expect(res.body expect((res.body.data?.user?.email || res.body.data?.email)).toBe(email);expect((res.body.data?.user?.email || res.body.data?.email)).toBe(email); (res.body.success === true || res.body.status === 'success' || res.body.data)).toBeTruthy();
  });

  it('4) Refresh Token renova o accessToken', async () => {
    const res = await request(app)
      .post('/api/auth/refresh-token')
      .send({ refreshToken });
    expect(res.status).toBe(200);
    expect(res.body.data.accessToken).toBeDefined();
    accessToken = res.body.data.accessToken;
  });

  it('5) Logout invalida o refreshToken', async () => {
    const res = await request(app)
      .post('/api/auth/logout')
      .send({ refreshToken });
    expect(res.status).toBe(200);
    expect(res.body.success).toBe(true);
  });

  it('6) Usar refreshToken inválido agora retorna 401', async () => {
    const res = await request(app)
      .post('/api/auth/refresh-token')
      .send({ refreshToken });
    expect([400, 401]).toContain(res.status);
    expect(['UNAUTHORIZED','INVALID_REFRESH_TOKEN']).toContain(res.body.code);
  });
});
